#include <bits/stdc++.h>
using namespace std;
int t[1001][1001];
int knapsack(int wt[],int val[],int n,int w)
{
    int t[n][w];
    memset(t,-1,sizeof(t));
    if(n==0||w==0)
    {
        return 0;
    }
    else if(t[n][w]!=-1)
    {
        return t[n][w];
    }
    else if(wt[n-1]<=w)
    {
        t[n][w]=max(val[n-1]+knapsack(wt,val,n-1,w-wt[n-1]),knapsack(wt,val,n-1,w));
    }
    else 
    {
        t[n][w]=knapsack(wt,val,n-1,w);
    }
    return t[n][w];
}
int main()
{
   int n=0,w=0;
   cin>>n;
   cin>>w;
   int wt[n],val[n];
   int i=0;
   for(i=0;i<n;i++)
   {
       cin>>val[i];
   }
   for(i=0;i<n;i++)
   {
       cin>>wt[i];
   }
   
   
  cout<<knapsack(wt,val,n,w)<<endl;

    return 0;
}


*******************************************************************************************************************************************************************************

#include<iostream>
using namespace std;

//int t[1001][1001];
int knapsack(int wt[],int val[] ,int n,int W)
{
   if (n == 0 || W == 0) 
        return 0; 
  
    // in the optimal solution 
    if (wt[n - 1] > W) 
        return knapsack(wt, val, n - 1,W); 
  
    // Return the maximum of two cases: 
    // (1) nth item included 
    // (2) not included 
    else
        return max( 
            val[n - 1] 
                + knapsack(wt, val, n - 1,W - wt[n - 1]), 
            knapsack(wt, val, n - 1,W)); 
}
int main()
{
   int n=0,w=0;
   cin>>n;
    cin>>w;
   int wt[n],val[n];
   int i=0;
   for(i=0;i<n;i++)
   {
       cin>>val[i];
   }
   for(i=0;i<n;i++)
   {
       cin>>wt[i];
   }
   
  
   cout<<knapsack(wt,val,n,w);

    return 0;
}
